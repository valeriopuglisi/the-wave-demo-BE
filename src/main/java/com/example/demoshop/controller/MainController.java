package com.example.demoshop.controller;

import com.example.demoshop.model.Compare;
import com.example.demoshop.model.Product;
import com.example.demoshop.repository.CompareRepository;
import com.example.demoshop.repository.ProductRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@CrossOrigin(origins = "http://localhost:8080", allowedHeaders = "*")
@RestController
@RequestMapping(path = "/api") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ProductRepository productRepository;
    @Autowired
    private CompareRepository compareRepository;

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody
    Product addProduct( @RequestBody Product product
            ) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Product n = new Product();
        n.setName(product.getName());
        n.setBrend(product.getBrend());
        n.setDescription(product.getDescription());
        n.setStars(product.getStars());
        n.setPrice(product.getPrice());
        n.setDiscount(product.getDiscount());
        productRepository.save(n);
        return n;
    }

    @PostMapping(path = "/compare") // Map ONLY POST Requests
    public @ResponseBody
    Compare addCompare( @RequestBody Compare compare
    ) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Compare c = new Compare();
        c.setProdOne(compare.getProdOne());
        c.setProdTwo(compare.getProdTwo());
        c.setProdThree(compare.getProdThree());
        compareRepository.save(c);
        return c;
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<Product> getAllProducts() {
        // This returns a JSON or XML with the users
        return productRepository.findAll();
    }
}

